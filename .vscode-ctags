!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
DATA	user/user.c	/^#define DATA /;"	d	file:
DEVICE_NAME	multi-flow-device.c	/^#define DEVICE_NAME /;"	d	file:
EXPORT_SYMTAB	multi-flow-device.c	/^#define EXPORT_SYMTAB$/;"	d	file:
INCLUDE_VERMAGIC	multi-flow-device.mod.c	/^#define INCLUDE_VERMAGIC$/;"	d	file:
MINORS	multi-flow-device.c	/^#define MINORS /;"	d	file:
MODNAME	multi-flow-device.c	/^#define MODNAME /;"	d	file:
Major	multi-flow-device.c	/^static int Major;$/;"	v	typeref:typename:int	file:
OBJECT_MAX_SIZE	multi-flow-device.c	/^#define OBJECT_MAX_SIZE /;"	d	file:
SIZE	user/user.c	/^#define SIZE /;"	d	file:
____versions	multi-flow-device.mod.c	/^static const struct modversion_info ____versions[]$/;"	v	typeref:typename:const struct modversion_info[]__used __section ("")	file:
_object_state	multi-flow-device.c	/^typedef struct _object_state$/;"	s	file:
_packed_work	multi-flow-device.c	/^typedef struct _packed_work \/\/ Work structure to write on devices$/;"	s	file:
all	Makefile	/^all:$/;"	t
all	user/Makefile	/^all:$/;"	t
awake_timeout	multi-flow-device.c	/^   unsigned long awake_timeout;       \/\/ timeout regulating the awake of blocking operations$/;"	m	struct:_object_state	typeref:typename:unsigned long	file:
blockingModeOn	multi-flow-device.c	/^   int blockingModeOn;                \/\/ 0 = non-blocking RW ops, 1 = blocking RW ops$/;"	m	struct:_object_state	typeref:typename:int	file:
buff	multi-flow-device.c	/^   char *buff;$/;"	m	struct:_packed_work	typeref:typename:char *	file:
buff	user/user.c	/^char buff[4096];$/;"	v	typeref:typename:char[4096]
clean	Makefile	/^clean:$/;"	t
cleanup_module	multi-flow-device.c	/^void cleanup_module(void)$/;"	f	typeref:typename:void
dev_ioctl	multi-flow-device.c	/^static long dev_ioctl(struct file *filp, unsigned int command, unsigned long param)$/;"	f	typeref:typename:long	file:
dev_open	multi-flow-device.c	/^static int dev_open(struct inode *inode, struct file *file)$/;"	f	typeref:typename:int	file:
dev_read	multi-flow-device.c	/^static ssize_t dev_read(struct file *filp, char *buff, size_t len, loff_t *off)$/;"	f	typeref:typename:ssize_t	file:
dev_release	multi-flow-device.c	/^static int dev_release(struct inode *inode, struct file *file)$/;"	f	typeref:typename:int	file:
dev_write	multi-flow-device.c	/^static ssize_t dev_write(struct file *filp, const char *buff, size_t len, loff_t *off)$/;"	f	typeref:typename:ssize_t	file:
devices_state	multi-flow-device.c	/^int devices_state[MINORS];$/;"	v	typeref:typename:int[]
filp	multi-flow-device.c	/^   struct file *filp;$/;"	m	struct:_packed_work	typeref:struct:file *	file:
fops	multi-flow-device.c	/^static struct file_operations fops = {$/;"	v	typeref:struct:file_operations	file:
get_major	multi-flow-device.c	/^#define get_major(/;"	d	file:
get_minor	multi-flow-device.c	/^#define get_minor(/;"	d	file:
high_bytes	multi-flow-device.c	/^int high_bytes[MINORS];$/;"	v	typeref:typename:int[]
high_prio_queue	multi-flow-device.c	/^   wait_queue_head_t high_prio_queue; \/\/ wait event queues$/;"	m	struct:_object_state	typeref:typename:wait_queue_head_t	file:
high_priority_flow	multi-flow-device.c	/^   char *high_priority_flow;          \/\/ high priority data stream$/;"	m	struct:_object_state	typeref:typename:char *	file:
i	user/user.c	/^int i;$/;"	v	typeref:typename:int
init_module	multi-flow-device.c	/^int init_module(void)$/;"	f	typeref:typename:int
isEnabled	multi-flow-device.c	/^   int *isEnabled;$/;"	m	struct:_object_state	typeref:typename:int *	file:
len	multi-flow-device.c	/^   size_t len;$/;"	m	struct:_packed_work	typeref:typename:size_t	file:
low_bytes	multi-flow-device.c	/^int low_bytes[MINORS];$/;"	v	typeref:typename:int[]
low_prio_queue	multi-flow-device.c	/^   wait_queue_head_t low_prio_queue;$/;"	m	struct:_object_state	typeref:typename:wait_queue_head_t	file:
low_priority_flow	multi-flow-device.c	/^   char *low_priority_flow;           \/\/ low priority data stream$/;"	m	struct:_object_state	typeref:typename:char *	file:
main	user/user.c	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
mutex_hi	multi-flow-device.c	/^   struct mutex mutex_hi;  \/\/ synchronization utilities$/;"	m	struct:_object_state	typeref:struct:mutex	file:
mutex_lo	multi-flow-device.c	/^   struct mutex mutex_lo;$/;"	m	struct:_object_state	typeref:struct:mutex	file:
object_state	multi-flow-device.c	/^} object_state;$/;"	t	typeref:struct:_object_state	file:
objects	multi-flow-device.c	/^object_state objects[MINORS];$/;"	v	typeref:typename:object_state[]
off	multi-flow-device.c	/^   long long int off;$/;"	m	struct:_packed_work	typeref:typename:long long int	file:
packed_work	multi-flow-device.c	/^} packed_work;$/;"	t	typeref:struct:_packed_work	file:
priorityMode	multi-flow-device.c	/^   int priorityMode;                  \/\/ 0 = low priority usage, 1 = high priority usage$/;"	m	struct:_object_state	typeref:typename:int	file:
test_hi_thread_r	user/user.c	/^void * test_hi_thread_r(void* path)$/;"	f	typeref:typename:void *
test_hi_thread_w	user/user.c	/^void * test_hi_thread_w(void* path)$/;"	f	typeref:typename:void *
test_lo_thread_r	user/user.c	/^void * test_lo_thread_r(void* path)$/;"	f	typeref:typename:void *
test_lo_thread_w	user/user.c	/^void * test_lo_thread_w(void* path)$/;"	f	typeref:typename:void *
the_thread	user/user.c	/^void * the_thread(void* path)$/;"	f	typeref:typename:void *
valid_bytes_hi	multi-flow-device.c	/^   int valid_bytes_hi;                \/\/ written bytes present in the high priority flow$/;"	m	struct:_object_state	typeref:typename:int	file:
valid_bytes_lo	multi-flow-device.c	/^   int valid_bytes_lo;                \/\/ written bytes present in the low priority flow$/;"	m	struct:_object_state	typeref:typename:int	file:
work	multi-flow-device.c	/^   struct work_struct work;$/;"	m	struct:_packed_work	typeref:struct:work_struct	file:
work_function	multi-flow-device.c	/^void work_function(struct work_struct *work)$/;"	f	typeref:typename:void
